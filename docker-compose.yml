services:
  # MongoDB Database - Primary data storage
  mongodb:
    image: mongo:6.0
    container_name: neutrino_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker-init/mongodb:/docker-entrypoint-initdb.d
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    networks:
      - neutrino_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/${MONGO_DATABASE} --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database - Analytics/Grafana storage
  postgres:
    image: postgres:15
    container_name: neutrino_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-init/postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - neutrino_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Energy Data Pipeline - Main application
  energy_pipeline:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: neutrino_pipeline
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./data/raw:/app/raw
      - ./data/transformed:/app/transformed  
      - ./data/logs:/app/logs
      - pipeline_data:/app/data
    environment:
      # API Configuration
      - POWER_BREAKDOWN_HISTORY_URL=https://api.electricitymaps.com/v3/power-breakdown/history?zone=TR
      - CARBON_HISTORY_URL=https://api.electricitymaps.com/v3/carbon-intensity/history?zone=TR
      - AUTH_TOKEN=${AUTH_TOKEN}
      - ELECTRICITY_MAPS_TOKEN=${ELECTRICITY_MAPS_TOKEN}
      
      # MongoDB Configuration (Docker hostnames)
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_DATABASE=${MONGO_DATABASE}
      - MONGODB_CONNECTION_STRING=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/?authSource=admin
      - MONGODB_DATABASE=${MONGO_DATABASE}
      
      # PostgreSQL Configuration (Docker hostnames)
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DB}
      - POSTGRES_USERNAME=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      
      # Application Configuration
      - RAW_DATA_DIR=${RAW_DATA_DIR}
      - TRANSFORMED_DATA_DIR=${TRANSFORMED_DATA_DIR}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_DIR=${LOG_DIR}
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    networks:
      - neutrino_network
    healthcheck:
      test: ["CMD", "python", "-c", "import pymongo; pymongo.MongoClient('mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/').admin.command('ping')"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Grafana - Data visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: neutrino_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      # Grafana Configuration
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      
      # Database Configuration
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${POSTGRES_HOST}:${POSTGRES_PORT}
      - GF_DATABASE_NAME=${POSTGRES_DB}
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - neutrino_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB Express - Database administration (optional)
  mongo_express:
    image: mongo-express:latest
    container_name: neutrino_mongo_express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: ${MONGO_HOST}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - neutrino_network
    profiles:
      - admin

  # pgAdmin - PostgreSQL administration (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: neutrino_pgadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - neutrino_network
    profiles:
      - admin

# Persistent data volumes
volumes:
  mongodb_data:
    driver: local
    name: neutrino_mongodb_data
  postgres_data:
    driver: local
    name: neutrino_postgres_data
  grafana_data:
    driver: local
    name: neutrino_grafana_data
  pgadmin_data:
    driver: local
    name: neutrino_pgadmin_data
  pipeline_data:
    driver: local
    name: neutrino_pipeline_data

# Custom network for service communication
networks:
  neutrino_network:
    driver: bridge
    name: neutrino_energy_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
